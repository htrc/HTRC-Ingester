===================
tools
===================

revertdlogs.sh / RevertDeltaLogs.java -

    this is a tool for resetting the delta log files, so one can redo the ingest
    into cassandra without having to do the rsync; or re-verify the data in cassandra
    without having to push them from pairtree again.
    
    the original delta logs generated from calling rsync is referred to as RAW. RAW
    delta log directories have the form dlog-yyyyMMdd-HHmmssXXX where
    
    yyyy is the 4-digit year
    MM is the 2-digit month
    dd is the 2-digit day of the month
    HH is the 2-digit hour
    mm is the 2-digit minute
    ss is the 2-digit second
    XXX is the 3-digit millisecond
    
    after the data has been ingested into cassandra, the RAW delta log directory is
    renamed and becomes PROCESSED delta logs.  PROCESSED delta log directories have
    the form _PROCESSED_dlog-yyyyMMdd-HHmmssXXX
    
    after the data has been verified, the PROCESSED delta log directory is renamed
    and becomes VERIFIED delta logs. VERIFIED delta log directories have the form
    _VERIFIED_dlog-yyyyMMdd-HHmmssXXX
     

    this tool takes these arguments:
    
    RevertDeltaLogs [<-f | --from> <VERIFIED | PROCESSED | ALL>]  [<-t | --to> <PROCESSED | RAW>]  [pattern [pattern ...]]
    
    if no arguments are given, it is equivalent to 
    
    RevertDeltaLogs -f ALL -t RAW
    
   
    - the -f or --from argument specifies what dlogs to reset.  ALL would reset both
      VERIFIED and PROCESSED delta logs.  Other values would only reset the specified
      delta logs
    
    - the -t or --to argument specifies what type to reset to.
    
    - the optional patterns can be used to selectively reset some specific delta
      log directories.  Any delta log directory names containing the pattern will
      be reset. 
       
   

trimpairtree.sh / PartreeTrimmer.java

    the introduction of the distributed rsync allows mutliple ingest services
    running in distributed fashion, with each rsyncking in a vertical subset
    of the source pairtree.
    
    what each ingest service rsyncks in depends a number of things:
    
    the hash space, which is typically the total number of ingest services 
    running together
    
    the hash key assigned to this ingest service
    
    and the list of rsync points
    
    when any of these change, the rsync may bring in new data while some
    stale data may remain in the local sub pairtree
    
    this tool can be used to trim the pairtree and purge stale data that
    is no longer the reponsibility of this particular ingest service
    



PathDepthFilter.java - 

    this is a tool to automatically remove some paths from the output of the
    linux tree command based on the path depth.  The tree command lists all
    paths with depths up to the specified level, and for rsync, we need to
    remove paths shallower than the given depth.  Doing so manually could be
    tedious.

   - the first parameter is the input file, which is the output from the linux
     tree command

   - the second parameter is the output file, which is generated by this tool
     and should contain the filtered paths

   - the third parameter specifies the depth to filter.  any path with fewer
     than <depth> segments will not be included in the output file.  note this
     depth is likely to be different from the depth level specified for the
     linux tree command, because you must take into consideration the number
     of path segments in the path passed to the tree command.

   - the fourth parameter specifies the path delimiter.  for windows it is the
     backslash, and for linux/unix it is the forward slash





SourceDestGen.java -

    this is a tool for easier creation of the rsync source/destination pairs in
    case there are a large number of pairs to do.

    Before using this tool, the first thing to do is go to the rsync source,
    and run linux tree command to list the directories to the desired depth
    level.  
    
    For example, with the IU public domain HT collection, we could list the
    directories 4 levels deep

      > tree -d -f -i -L 4 /home/hathitrust/pair_tree_root  > tree.txt

    after having edited tree.txt to get rid of any entries that should not be
    included (can be done using the PathDepthFilter tool), feed the edited
    tree.txt into the SourceDestGen tool

    It takes 4 parameters, plus an optional fifth parameter.

   - the first parameter is the edited tree.txt

   - the second parameter is the output file generated by this tool, which
     should contain the rsync source and dest pairs

   - the third parameter is a string identifying the common root path segment
     of the entries in tree.txt; this common path segment will be replaced by
     the string in the fourth parameter to generate the rsync destination path

   - the fourth parameter is the replacement path segment for the destination
     paths.

     for example, if rsync sources are:

       /home/hathitrust/pair_tree_root/30/
       /home/hathitrust/pair_tree_root/31/
       /home/hathitrust/pair_tree_root/32/

     and they are to be rsyncked to these locations respectively:

       /usr/test/rsync_test/root/30/
       /usr/test/rsync_test/root/31/
       /usr/test/rsync_test/root/32/

     then the third parameter would be "/home/hathitrust/pair_tree_root/", and
     the fourth parameter would be "/usr/test/rsync_test/root/"

   - the optional fifth parameter is used when the source uses an rsync daemon.
     it works in a similar fashion as the fourth paramter, except it is used to
     replace path segment for the source.  if you do not wish to replace the
     source path with alias, do not provide the fifth parameter

     for example, if the source machine runs an rsync daemon, and the actual
     path "/home/hathitrust/pair_tree_root" is defined as "[collection]" in
     rsyncd.conf, then the fifth parameter would be "collection", and in the
     output, source root paths would show up as
       
       RSYNC_SOURCE_ROOT1=collection/30/
       RSYNC_SOURCE_ROOT2=collection/31/
       RSYNC_SOURCE_ROOT3=collection/32/
       
     instead of 
     
       RSYNC_SOURCE_ROOT1=/home/hathitrust/pair_tree_root/30/
       RSYNC_SOURCE_ROOT2=/home/hathitrust/pair_tree_root/31/
       RSYNC_SOURCE_ROOT3=/home/hathitrust/pair_tree_root/32/

    after having used this tool, the final step is to copy and paste the
    conents of the output file from this tool to the htrc-ingest.properties
    file.  remember to update the property RSYNC_SOURCE_COUNT accordingly

